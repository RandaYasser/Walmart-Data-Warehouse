I am building a data warehouse for a retail store, we have the schema of the data warehouse as specified in the create statements below ( in Oracle)
the product dimension has a numbering schema, given this numbering schema, generate 50 invoices with 10 - 15 different products each (products should vary in quantity but follow a logical manner for example no one will buy 3 TVs at once), keep in mind that I want to 

**Groceries 
categoryBK 1, subcategoryBK starts from 100, ProductBK starts from 1

    - Fresh Produce 101
	- Bakery 102
	- Dairy 103
	- Meat and Chicken 104
    - dry goods 151
    - snacks 152
    - beverages 153
    - canned goods 154
    
**Toys and Games
categoryBK 2, subcategoryBK starts from 200, ProductBK starts from 2000
    
    - board games 202
    - puzzles 204
	- educational games 201
	- toys 203

**Pet Supplies
categoryBK 3, subcategoryBK starts from 300, ProductBK starts from 3000
    
    - Pet food 300
    - pet litter 301
    - pet toys 302
    - pet accessories 303

**Household
categoryBK 4, subcategoryBK starts from 400, ProductBK starts from 4000
    
    - Cleaning supplies 400
    - paper products 401
    - Storage and Organization 402

**Stationary
categoryBK 5, subcategoryBK starts from 500, ProductBK starts from 5000
     
    - Writing Supplies 500
    - Office Equipment 501
    - Paper and Notebooks 502
    - School Supplies 503
    
**Personal Care  
categoryBK 6, subcategoryBK starts from 600, ProductBK starts from 6000
    
    - skincare 601
    - hair care 600
    - oral care 602
    - hygiene products 603
    
**Electronics 
categoryBK 7, subcategoryBK starts from 700, ProductBK starts from 7000
    
    - Smartphones 700
    - Appliances 701
    - Laptops 702
    - Gaming Consoles 703
    - Wearables 704
    - Tablets 705
    - Cameras 706
    - Smart Home 707
    - TVs 708
    - Audio Equipment 709

The invoice should be between 2022-01-01 and 2023-01-01.

ProductSk can be from 1 to 563.

EmployeeSK can be from 21 to 30.

CustomerSK can be from 1 to 87.

DateId follows this format YYYYMMDDHH where HH can be from 00 to 23.

StoreSK can be from 1 to 10.

The EmployeeFK, CustomerFK, and StorFk should be fixed for the each invoice.

Make sure to apply promotions based on these promotions in the promotion dimension.

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (1, 101, 'Year End Sale', 'Discount', 25.00, TO_DATE('2022-12-15', 'YYYY-MM-DD'), TO_DATE('2022-12-31', 'YYYY-MM-DD'));

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (2, 102, 'Ramadan Offers', 'Discount', 30.00, TO_DATE('2022-03-20', 'YYYY-MM-DD'), TO_DATE('2022-04-02', 'YYYY-MM-DD'));

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (3, 103, 'Eid al-Adha Deals', 'Bundle (Buy 2 Get 1)', 33.33, TO_DATE('2022-07-05', 'YYYY-MM-DD'), TO_DATE('2022-07-12', 'YYYY-MM-DD'));

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (4, 104, 'Black Friday Sale', 'Discount', 50.00, TO_DATE('2022-11-25', 'YYYY-MM-DD'), TO_DATE('2022-11-25', 'YYYY-MM-DD'));

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (5, 105, 'Back to School Discounts', 'Bundle (Buy 1 Get 1)', 50.00, TO_DATE('2022-08-15', 'YYYY-MM-DD'), TO_DATE('2022-09-01', 'YYYY-MM-DD'));

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (6, 106, 'New Year Offers', 'Discount', 20.00, TO_DATE('2022-12-26', 'YYYY-MM-DD'), TO_DATE('2023-01-01', 'YYYY-MM-DD'));

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (7, 107, 'Summer Sale', 'Discount', 35.00, TO_DATE('2022-06-01', 'YYYY-MM-DD'), TO_DATE('2022-06-30', 'YYYY-MM-DD'));

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (8, 108, 'Clearance Sale', 'Bundle (Buy 3 Get 2)', 40.00, TO_DATE('2022-02-01', 'YYYY-MM-DD'), TO_DATE('2022-02-15', 'YYYY-MM-DD'));

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (9, 109, 'Weekend Flash Sale', 'Discount', 10.00, TO_DATE('2022-09-17', 'YYYY-MM-DD'), TO_DATE('2022-09-18', 'YYYY-MM-DD'));

INSERT INTO dimPromotion (PromotionSK, PromotionBK, Promotion_name, Promotion_type, discount_percentage, Start_date, End_date) 
VALUES (10, 110, 'Special Loyalty Discounts', 'Discount', 5.00, TO_DATE('2022-03-01', 'YYYY-MM-DD'), TO_DATE('2022-03-31', 'YYYY-MM-DD'));


below is the schema of the data warehouse

CREATE TABLE dimDate (
    DateID NUMBER PRIMARY KEY,
    Hours NUMBER CHECK (Hours BETWEEN 0 AND 23),
    fulldate DATE NOT NULL,
    Day_of_week VARCHAR2(20),
    Month VARCHAR2(20),
    Quarter NUMBER(1) CHECK (Quarter BETWEEN 1 AND 4),
    Year NUMBER NOT NULL,
    Holiday_flag NUMBER(1) CHECK (Holiday_flag IN (0, 1))
);

CREATE TABLE dimProduct (
    ProductSK NUMBER PRIMARY KEY,
    ProductBK NUMBER NOT NULL,
    Product_name VARCHAR2(255) NOT NULL,
    Category_BK NUMBER NOT NULL,
    Category_name VARCHAR2(255),
    Subcategory_BK NUMBER,
    Subcategory_name VARCHAR2(255),
    Brand VARCHAR2(255),
    Price NUMBER(10, 2) NOT NULL CHECK (Price > 0), -- Ensures Price is positive
    Shelf_life NUMBER(8, 2) NOT NULL CHECK (Shelf_life > 0) -- in days
);

CREATE TABLE dimCustomer (
    CustomerSK NUMBER PRIMARY KEY,
    CustomerBK NUMBER NOT NULL,
    Customer_name VARCHAR2(255) NOT NULL,
    Phone VARCHAR2(20),
    Gender CHAR(1) CHECK (Gender IN ('M', 'F')), -- Ensures valid gender values
    Age NUMBER CHECK (Age >= 0), -- Ensures Age is non-negative
    City VARCHAR2(255)
);

CREATE TABLE dimEmployee (
    EmployeeSK NUMBER PRIMARY KEY,
    EmployeeBK NUMBER NOT NULL,
    Employee_name VARCHAR2(255) NOT NULL,
    NationalID VARCHAR2(50) NOT NULL,
    Job_title VARCHAR2(100),
    Gender CHAR(1) CHECK (Gender IN ('M', 'F')), -- Ensures valid gender values
    Hire_date DATE NOT NULL
);

CREATE TABLE dimStore (
    StoreSK NUMBER PRIMARY KEY,
    StoreBK NUMBER NOT NULL,
    Store_location VARCHAR2(255) NOT NULL,
    Store_size NUMBER CHECK (Store_Size > 0), 
    Manager_ID NUMBER
);

CREATE TABLE dimPromotion (
    PromotionSK NUMBER PRIMARY KEY,
    PromotionBK NUMBER NOT NULL,
    Promotion_name VARCHAR2(250) NOT NULL,
    Promotion_type VARCHAR2(50),
    discount_percentage NUMBER(5, 2) CHECK (discount_percentage BETWEEN 0 AND 100),
    Start_date DATE NOT NULL,
    End_date DATE,
    CONSTRAINT chk_date_range CHECK (End_date IS NULL OR End_date >= Start_date) -- Ensures valid date range
);

-- Creating the fact table
-- Grain: One row per transaction line item (each product sold per transaction).
CREATE TABLE factTransaction (
    TransactionID NUMBER PRIMARY KEY,
    InvoiceID NUMBER NOT NULL,
    CustomerFK NUMBER,
    StoreFK NUMBER,
    EmployeeFK NUMBER,
    Date_ID NUMBER,
    PromotionFK NUMBER,
    ProductFK NUMBER,
    Quantity NUMBER NOT NULL CHECK (Quantity > 0), -- Ensures Quantity is positive
    Total_price NUMBER(15, 2) NOT NULL CHECK (Total_price >= 0), -- Ensures Total_price is non-negative
    CONSTRAINT fk_Customer FOREIGN KEY (CustomerFK) REFERENCES dimCustomer(CustomerSK),
    CONSTRAINT fk_Store FOREIGN KEY (StoreFK) REFERENCES dimStore(StoreSK),
    CONSTRAINT fk_Employee FOREIGN KEY (EmployeeFK) REFERENCES dimEmployee(EmployeeSK),
    CONSTRAINT fk_Date FOREIGN KEY (Date_ID) REFERENCES dimDate(DateID),
    CONSTRAINT fk_Promotion FOREIGN KEY (PromotionFK) REFERENCES dimPromotion(PromotionSK),
    CONSTRAINT fk_Product FOREIGN KEY (ProductFK) REFERENCES dimProduct(ProductSK)
);